; music_driver.s - NSF-compatible music player logic

.segment "CODE"

.include "nes.inc"

.export music_init, music_play

; =============================================================================
; INIT: called once at startup
music_init:
    lda #$00
    sta current_row
    sta current_tick
    sta song_ptr_lo
    sta song_ptr_hi
    rts

; =============================================================================
; PLAY: called ~60 times/sec from the main NSF driver
music_play:
    jsr update_tick
    bne .no_update
    jsr play_row
.no_update:
    rts

; =============================================================================
; update_tick: handles timing between rows (every N ticks)
update_tick:
    inc current_tick
    lda current_tick
    cmp #ticks_per_row
    bcc .no_tick
    lda #0
    sta current_tick
    lda #1
    rts
.no_tick:
    lda #0
    rts

; =============================================================================
; play_row: play current row from pattern table
play_row:
    ldx current_row
    lda notes_pulse1, x
    jsr play_note_pulse1

    lda notes_pulse2, x
    jsr play_note_pulse2

    lda notes_triangle, x
    jsr play_note_triangle

    lda notes_noise, x
    jsr play_note_noise

    lda notes_dpcm, x
    jsr play_note_dpcm

    inc current_row

    lda current_row
    cmp #pattern_length
    bcc .no_loop
    lda #0
    sta current_row
.no_loop:
    rts

; =============================================================================
; Actual APU register logic
play_note_pulse1:
    tax
    lda pulse_duty_table, x
    sta $4000
    lda pulse_timer_low_table, x
    sta $4002
    lda pulse_timer_high_table, x
    sta $4003
    rts

play_note_pulse2:
    tax
    lda pulse_duty_table, x
    sta $4004
    lda pulse_timer_low_table, x
    sta $4006
    lda pulse_timer_high_table, x
    sta $4007
    rts

play_note_triangle:
    tax
    lda triangle_linear_table, x
    sta $4008
    lda triangle_timer_low_table, x
    sta $400A
    lda triangle_timer_high_table, x
    sta $400B
    rts

play_note_noise:
    tax
    lda noise_volume_table, x
    sta $400C
    lda noise_period_table, x
    sta $400E
    lda #$00
    sta $400F
    rts

play_note_dpcm:
    tax
    lda sample_start_addr, x
    sta $4012
    lda sample_length, x
    sta $4013
    lda #%00011111 ; enable IRQ off, loop off, rate = $1F
    sta $4010
    lda #%00000001 ; play sample
    sta $4015
    rts

; =============================================================================
; Data section - to be generated by exporter
.segment "RODATA"

notes_pulse1:
    .byte $3C, $3E, $40, $42, $00
notes_pulse2:
    .byte $30, $32, $34, $36, $00
notes_triangle:
    .byte $00, $02, $04, $06, $00
notes_noise:
    .byte $00, $01, $02, $03, $00
notes_dpcm:
    .byte $00, $01, $02, $03, $00

pulse_duty_table:
    .byte $80, $80, $80, $80, $10
pulse_timer_low_table:
    .byte $FF, $EE, $DD, $CC, $00
pulse_timer_high_table:
    .byte $07, $06, $05, $04, $00

triangle_linear_table:
    .byte $7F, $7F, $7F, $7F, $00
triangle_timer_low_table:
    .byte $FF, $EE, $DD, $CC, $00
triangle_timer_high_table:
    .byte $07, $06, $05, $04, $00

noise_volume_table:
    .byte $0F, $0E, $0C, $0A, $00
noise_period_table:
    .byte $00, $01, $02, $03, $00

sample_start_addr:
    .byte $C0, $D0, $E0, $F0, $00
sample_length:
    .byte $10, $10, $10, $10, $00

; Constants and state
.segment "BSS"
current_row:   .res 1
current_tick:  .res 1
song_ptr_lo:   .res 1
song_ptr_hi:   .res 1

; Pattern config
pattern_length = 5

; Ticks per row = 6 (1/10th of second)
ticks_per_row = 6
